%  PT Parser.ssl	v1.01
%
% Date:  30 Jun 1980
%	 (revised 7 December 2009)
%
% Author:  Alan Rosselet
%
% Abstract
%
%     This module parses the syntax token stream emitted by the scanner
%   and emits a postfix stream of tokens to the semantic analyzer
%   module.  The parser detects and repairs syntax errors so that the
%   token stream emitted to the semantic analyzer is syntactically
%   legal (except for the special case of declaration phase errors - see
%   comment in the Block routine below).

Input :
	% Keywords must be first both here and in stdIdentifiers,
	% and they must appear in the same order

	pDiv			'div'
	firstKeywordToken = pDiv 
	pMod			'mod'
	pOr				'or'
	pAnd			'and'
	pNot			'not'
	pElse			'else'
	pOf				'of'
	pArray			'array'
	pFile			'file'
	pPacked			'packed'
	pProgram		'program'
	pVar			'var'
	pType			'type'
	pIf				'if'
	pCase			'case'
	pLet 			'let' %new change
	pFunction		'function' %new change
	pSwitch			'switch' %new change
	pDefault		'default' %new change
	pElsif			'elsif' %new change
	pLoop			'loop' %new change
	pBreak			'break' %new change
	pWhen			'when' %new change
	pClass			'class' %new change
	pPublic			'public' %new change
	lastKeywordToken = pPublic %new change 

	pIdentifier 
	firstCompoundInputToken = pIdentifier
	pInteger
	pLiteral
	lastCompoundInputToken = pLiteral

	pNewLine
	pEndFile
	pPlus			'+'
	pMinus			'-'
	pStar			'*'
	pDot			'.'
	pComma			','
	pSemicolon		';'
	pColon			':'
	pEquals			'==' %newly changed form '=' to '=='
	pNotEqual		'!=' %newly changed from '<>' to '!='
	pLess			'<'
	pLessEqual		'<='
	pGreaterEqual	'>='
	pGreater		'>'
	pLeftParen		'('
	pRightParen		')'
	pLeftBracket	'['
	pRightBracket	']'
	pDotDot			'..'
	pLeftBrace 		'{' %newly changed
	pRightBrace 	'}' %newly changed
	pHash 			'#' %newly changed
	pAt 			'@' %newly changed
	pSlash 			'/' %newly changed
	pAssign 		'=' %newly changed
	lastSyntaxToken = pDotDot;

Output :
	sIdentifier 
	firstSemanticToken = sIdentifier
	firstCompoundSemanticToken = sIdentifier
	sInteger
	sLiteral
	lastCompoundSemanticToken = sLiteral

	sProgram
	sParmBegin
	sParmEnd
	sConst
	sType
	sVar
	sProcedure
	sBegin
	sEnd
	sNegate
	sArray
	sPacked
	sFile
	sRange
	sCaseStmt
	sCaseEnd
	sLabelEnd
	sExpnEnd
	sNullStmt
	sAssignmentStmt
	sSubscript
	sCallStmt
	sFieldWidth
	sIfStmt
	sThen
	sElse
	sEq
	sNE
	sLT
	sLE
	sGT
	sGE
	sAdd
	sSubtract
	sMultiply
	sDivide
	sModulus
	sInfixOr
	sOr
	sInfixAnd
	sAnd
	sNot
	sNewLine
	sPublic		%newly added
	sDefault 	%newly added
	sClass 		%newly added
	sSwitchStmt %newly added
	sLoopStmt	%newly added
	sLoopBreakWhen %newlya added
	sLoopEnd	%newly added
	sSubstring 	%newly added
	sLength		%newlyadded
	lastSemanticToken = sLength; %newly updated


rules

Program :
	'program'  .sProgram
	% program name
	pIdentifier
	% program parameters
	'('
	{
	    pIdentifier  .sIdentifier
	    [
		| ',':
		| *:
		    >
	    ]
	}
	')'
	.sParmEnd
	 '{' @Block;	%newly updated

Block :
	% Strictly speaking, standard Pascal requires that declarations
	% appear only in the order consts, types, vars, procedures.
	% We allow arbitrary intermixing of these instead to preserve
	% programmer sanity.
	{[
	    | 'let': %newly changed
		.sConst
		@ConstantDefinitions
	    | 'type':
		.sType
		@TypeDefinitions
	    | 'var':
		.sVar
		@VariableDeclarations
	    | 'function':				%newly updated
		.sProcedure
		% procedure name
		pIdentifier  .sIdentifier
		@ProcedureHeading
		'{' @Block
		| 'public':							  %newly added
			[								  %newly added
				|'function':				  %newly added
					.sProcedure				  %newly added
					.sPublic				  %newly added
					pIdentifier .sIdentifier  %newly added
					@ProcedureHeading 		  %newly added
					'{' @Block				  %newly added
				| *:						  %newly added	
				>							  %newly added
			]								  %newly added
		| 'class':							  %newly added
			.sClass							  %newly added
			pIdentifier .sIdentifier 		  %newly added
			'{' @Block						  %newly added
	    | *:
		>
	]}
	@BeginStmt;

ConstantDefinitions :
	% Accept one or more named constant definitions
	pIdentifier  .sIdentifier
	@ConstantValue ';'
	{[
	    | pIdentifier:
		.sIdentifier
		@ConstantValue ';'
	    | *:
		>
	]};

ConstantValue :
	'==' %newly changed from = in pt
	[
	    | pInteger:
		.sInteger
	    | pIdentifier:
		.sIdentifier
	    | '-':
		@UnsignedIntegerConstant
		.sNegate
	    | '+':
		@UnsignedIntegerConstant
	    | pLiteral:
		.sLiteral
		@checkAt%newly changed 
	];

checkAt :%newly changed 
[
	|'@'
		[
			|pInteger:
			.sInteger
			|pVar:
			.sVar
			':'
			[
				|pInteger:
				.sInteger
				|pVar:
				.sVar
			]
		]
	|*:
	>	
]
UnsignedIntegerConstant :
	[
	    | pIdentifier:
		.sIdentifier
	    | pInteger:
		.sInteger
	];

%newly changed rule
TypeDefinitions :
	% Accept one or more named type definitions.
	pIdentifier  .sIdentifier
	{[
		| ',':
			.sType
			[
				| pIdentifier:
				.sIdentifier
				|*:
				>
			]
		| *:
		>
	]}
	':'  @TypeBody  ';';

TypeBody :
	[
	    | 'packed':
		'array'  .sArray  .sPacked
		'['  @SimpleType  ']'
		'of'  @SimpleType
	    | 'array':
		.sArray
		'['  @SimpleType  ']'
		'of'  @SimpleType
	    | 'file':
		.sFile
		'of'  @SimpleType
	    | *:
		@SimpleType
	];

SimpleType :
	% A simple type is a named type (possibly predefined)
	% or a subrange type specification
	[
	    | pIdentifier:
		.sIdentifier
		[
		    | '..':
			.sRange		%% this may be unnecessary
			@OptionallySignedIntegerConstant
		    | *:
		]
	    | *:
		@OptionallySignedIntegerConstant
		'..'  .sRange
		@OptionallySignedIntegerConstant
	];

OptionallySignedIntegerConstant :
	[
	    | '-':
		@UnsignedIntegerConstant
		.sNegate
	    | '+':
		@UnsignedIntegerConstant
	    | *:
		@UnsignedIntegerConstant
	];

%newly changed rule
VariableDeclarations :
	% Accept one or more variable declarations.
	pIdentifier  .sIdentifier
	{[
		| ',':
			.sVar
			[
				| pIdentifier:
					.sIdentifier
				| *: 
				>
			]
		| *:
		>
	]}
	':'  @TypeBody  ';';

ProcedureHeading :
	% Accept zero or more procedure formal parameter declarations.
	[
	    | '(':
		{
		    % formal parameter identifier
		    [
			| 'var':
			    pIdentifier  .sIdentifier
			    .sVar
			| *:
			    pIdentifier  .sIdentifier
		    ]
		    ':'
		    % type identifier
		    pIdentifier  .sIdentifier
		    [
			| ',':	%newly updated
			| *:
			    >
		    ]
		}
		')'
	    | *:
	]
	.sParmEnd; %newly updated

Statement :
	[
	    | pIdentifier:
		@AssignmentOrCallStmt
	    | '{': 						%newly changed
		@BeginStmt
	    | 'if':						%newly updated
		@IfStmt
	    | 'case':
		@CaseStmt
		| 'switch':%newly changed
		@SwitchStmt
		| 'loop':%newly changed
		@LoopStmt
		| 'default':%newly changed
		@DefaultStmt
		| 'break when'
		@BreakWhenStmt
	    | *:
		.sNullStmt
	];

AssignmentOrCallStmt :
	[
	    | '=': %newly changed from := in pt to = in jt
		.sAssignmentStmt
		.sIdentifier	% identifier accepted in the Statement rule
		@Expression
		.sExpnEnd
	    | '[':
		.sAssignmentStmt
		.sIdentifier
		.sSubscript
		@Expression
		.sExpnEnd
		']'  '=' %newly changed
		@Expression
		.sExpnEnd
	    | *:
		@CallStmt
	];

CallStmt :
	.sCallStmt
	.sIdentifier	% procedure identifier accepted in the Statement rule
	% accept zero or more actual parameters
	[
	    | '(':
		{
		    @Expression
		    .sExpnEnd
		    % allow a field width specification to occur in calls
		    % to the standard procedures write and writeln
		    [
			| ':':
			    .sFieldWidth
			    @Expression
			    .sExpnEnd
			| *:
		    ]
		    [
			| ',':
			| *:
			    >
		    ]
		}
		')'
	    | *:	% no actual parameters
	]
	.sParmEnd;

BeginStmt :
	.sBegin
	{
	    @Statement
	    [
		| ';':
		| '}':	%newly changed
		    .sEnd
		    >
	    ]
	};

%newly updated
IfStmt :
	.sIfStmt
	'('
	@Expression
	')'
	.sExpnEnd
	.sThen
	@Statement
	[
	    | 'else':
		.sElse
		@Statement
		| 'elsif':	%newly added
		.sElse		%newly added
		@IfStmt 	%newly added
	    | *:
	];

%===============newly changed===============
SwitchStmt : 
	.sSwitchStmt
	'('
	 pIdentifier  .sIdentifier
	')'
	'{'
	@BeginStmt
	.sSwitchEnd;

CaseStmt :
	.sCaseStmt

	@CaseAlternative
	{[
	    | ';':
		% since case alternatives cannot be null, allow
		% for the common situation of an extra semicolon
		% at the end of the list of case alternatives.
		@CaseAlternative
	    | '}':
		>
	]}
	.sCaseEnd;

CaseAlternative :
	% A case alternative is a statement labelled by
	% one or more optionally signed integer constants

	{
	    @OptionallySignedIntegerConstant
	    [
		| ',':
		| *:
		    >
	    ]
	}
	.sLabelEnd
	':'  @Statement;

DefaultStmt :
	.sDefault
	':' @Statement;
%===============================================

WhileStmt :
	.sWhileStmt
	@Expression
	.sExpnEnd
	'do'
	@Statement;

RepeatStmt :
	.sRepeatStmt
	{
	    @Statement
	    [
		| ';':
		| 'until':
		    .sRepeatEnd
		    >
	    ]
	}
	@Expression
	.sExpnEnd;

LoopStmt :
	.sLoopStmt
	
	'{'

	{
		@Statement
		[
		| ';':
		| '}':
			.sLoopEnd
			>
		]
	};

BreakWhenStmt :
	.sLoopBreakWhen
	'('
	@Expression
	')'
	.sExpnEnd; 

%===============================================
Expression :
	@SimpleExpression
	[
	    | '==':
		@SimpleExpression  .sEq
	    | '<>':
		@SimpleExpression  .sNE
	    | '<':
		@SimpleExpression  .sLT
	    | '<=':
		@SimpleExpression  .sLE
	    | '>':
		@SimpleExpression  .sGT
	    | '>=':
		@SimpleExpression  .sGE
	    | *:
	];

SimpleExpression :
	[
	    | '+':
		@Term
	    | '-':
		@Term  .sNegate
	    | *:
		@Term
	]
	{[
	    | '+':
		@Term  .sAdd
	    | '-':
		@Term  .sSubtract
	    | 'or':
		.sInfixOr  @Term  .sOr
	    | *:
		>
	]};

Term :
	@Factor
	{[
	    | '*':
		@Factor  .sMultiply
	    | 'div':
		@Factor  .sDivide
	    | 'mod':
		@Factor  .sModulus
	    | 'and':
		.sInfixAnd  @Factor  .sAnd
	    | *:
		>
	]};

Factor :
	[
	    | pIdentifier:
		.sIdentifier
		@IdentifierExtension
	    | pInteger:
		.sInteger
	    | '(':
		@Expression  ')'
	    | 'not':
		@Factor
		.sNot
	    | pLiteral:
		.sLiteral
		@checkAt %newly changed 
		| '#':
		.sLength
	    | 'file':
		.sFile '(' @Expression ')'
		.sExpnEnd
	];

IdentifierExtension :
	% Handle subscripts and function actual parameter lists
	[
	    | '[':
		.sSubscript
		@Expression  ']'
		.sExpnEnd
	    | '(':
		.sParmBegin
		@Expression  ')'
		.sExpnEnd
		.sParmEnd
	    | *:
	];

end

% PT Scanner.ssl   Ver. 1.03
%
% Date:  30 Jun 1980
%	 (revised 22 Jan 2002)
%
% Author:  Alan Rosselet
%
% Abstract
%     The scanner breaks a PT source program up into syntax tokens.
%   It removes token separators - blanks, tabs, comments.  The
%   scanner detects these lexical errors:  unclosed comments,
%   unclosed literals, literals that cross a line boundary,
%   illegal characters and integers followed by identifiers with no
%   separator between them.

Input :		%added some new input tokens
	lLetter 
	firstCharClass = lLetter 
	lDigit
	lPlus		'+'
	lMinus		'-'
	lStar		'*'
	lColon		':'
	lEquals		'='
	lDot		'.'
	lComma		','
	lSemicolon	';'
	lQuote		'"'		%newly changed
	lLeftAngle	'<'
	lRightAngle	'>'
	lLeftParen	'('
	lRightParen	')'
	lLeftBracket	'['
	lRightBracket	']'
	lLeftBrace	'{'
	lRightBrace	'}'
	lBlank
	lIllegal
	lNewLine
	lTab
	lNewPage 
	lEndFile
	lSlash	'/'		%newly changed
	lHash	'#'		%newly changed
	lExclamation	'!'		%newly changed
	lAt	'@'		%newly changed
	lastCharClass = lAt;	%newly changed

Output :
	% Keyword tokens -
	%   Tokens pDiv through pRepeat are keywords which will be separated
	%   from user defined identifiers by the Screener.  This Scanner
	%   treats them all as identifiers.
	pDiv 
	firstKeywordToken = pDiv
	pMod
	pOr
	pAnd
	pNot
	pElse
	pOf
	pArray
	pFile
	pPacked
	pProgram
	pVar
	pType
	pIf
	pCase
	pLet %new change
	pFunction %new change
	pSwitch %new change
	pDefault %new change
	pElsif %new change
	pLoop %new change
	pBreak %new change
	pWhen %new change
	pClass %new change
	pPublic %new change
	lastKeywordToken = pPublic %new change

	% Scanner tokens -
	%   These are the tokens actually recognized by the Scanner itself.

	% Compound tokens - 
	%   These will be sent to the parser with a value or index.
	pIdentifier 
	firstCompoundInputToken = pIdentifier
	pInteger
	pLiteral
	lastCompoundInputToken = pLiteral

	% Non-compound tokens - ============added pSlash
	%   These tokens simply represent themselves.
	pNewLine
	pEndFile
	pPlus
	pMinus
	pStar
	pDot
	pComma
	pSemicolon
	pColon
	pEquals
	pNotEqual
	pLess
	pLessEqual
	pGreaterEqual
	pGreater
	pLeftParen
	pRightParen
	pLeftBracket
	pRightBracket
	pDotDot
	pLeftBrace %newly changed
	pRightBrace %newly changed
	pHash %newly changed
	pAt %newly changed
	pSlash		%newly changed
	pAssign		%newly changed
	lastSyntaxToken = pAssign;		%newly changed

Error :
	eIllegalChar = 5
	firstScanError = eIllegalChar
	eLiteralLine
	eLiteralEOF
	eCommentEOF
	eNoSeparator
	lastScanError = eNoSeparator;

mechanism Buffer :
    % Buffer saves the characters associated with the
    % compound tokens identifier, integer and literal.

    oBufferSave;
	% Save the character form of the last accepted lexical token.




rules

% Note that the order of choice alternatives
% may have a significant effect on performance
% under some implementations of S/SL.
Scan : %======change the rule for scanning comment and not equal
	{[
	    | lBlank :
	    | lLetter:
		oBufferSave
		@Identifier
	    | lNewLine:
		.pNewLine
	    | lTab:
	    | ';':
		.pSemicolon

	    | '/':		%newly changed
		[		%newly changed
		    | '*':		%newly changed
			@Comment		%newly changed
			| '/':		%newly changed
			@AlternateComment		%newly changed
		    | *:		%newly changed
			.pSlash		%newly changed
		]		%newly changed

	    | ')':
		.pRightParen
		| '(':		%newly changed
		.pLeftParen		%newly changed
	    | '[':
		.pLeftBracket
	    | ']':
		.pRightBracket
		|'{': %newly changed
		.pLeftBrace %newly changed
		|'}': %newly changed
		.pRightBrace %newly changed
		|'#': %newly changed
		.pHash %newly changed
		|'@': %newly changed
		.pAt %newly changed
	    | ',':
		.pComma
	    | ':':	%newly changed
		.pColon %newly changed
	    | lDigit:
		oBufferSave
		@Integer
		[
		    | lLetter:
			#eNoSeparator
			oBufferSave
			@Identifier
		    | *:
		]

	    | '=':
	    [	
	    	|'=': %newly changed 
			.pEquals
			| *:
			.pAssign %newly changed 
		]

	    | '+':
		.pPlus
	    | lQuote:
		@Literal
	    | '-':
		.pMinus
	    | '.':
		[
		    | '.':
			.pDotDot
		    | *:
			.pDot
		]
	    | '!':
	    [
	    	|'=': %newly changed
	    	.pNotEqual %newly changed
	    	|*:
	    	.pNot
	    ]

	    | '<':
		[
		    | '=':
			.pLessEqual
		    | *:
			.pLess
		]
	    | '>':
		[
		    | '=':
			.pGreaterEqual
		    | *:
			.pGreater
		]
	    | '*':
		.pStar
	    | lNewPage:
	    | lIllegal:
		#eIllegalChar
	    | lEndFile:
		.pEndFile
		>
	]};

Identifier :
	% Assemble an identifier token

	{[
	    | lLetter, lDigit:
		oBufferSave
	    | *:
		.pIdentifier
		>
	]};

Integer :
	% Assemble an integer token

	{[
	    | lDigit:
		oBufferSave
	    | *:
		.pInteger
		>
	]};

Literal :
	% Assemble a literal string token

	{[
	    | lQuote:
		[
		    | lQuote:
			oBufferSave
		    | *:
			.pLiteral
			>
		]
	    | lNewLine:		% literal must not cross a line boundary
		#eLiteralLine
		.pNewLine
		>
	    | lEndFile:		% literal must be closed before EOF
		#eLiteralEOF
		.pEndFile
		>
	    | *:	% literal may contain any other character
		?
		oBufferSave
	]};

Comment : %=======new rules for commenting
	% Discard the contents of a comment

	{[
	    | '*': 		%newly changed
	    [			%newly changed
	    	| '/':		%newly changed
	    	>		%newly changed
	    	| *: ?		%newly changed
	    ]		%newly changed
	    | lNewLine:
		.pNewLine
	    | lEndFile:		% comment must be closed before EOF
		#eCommentEOF
		.pEndFile
		>
	    | *:	% comment may contain any other character
		?
	]};

AlternateComment :
	{[
	    | lNewLine:
		.pNewLine
		>		%newly changed
	    | lEndFile:
		#eCommentEOF
		.pEndFile
		>
	    | *:
		?
	]};

end
